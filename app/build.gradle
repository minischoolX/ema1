def config = configHelper.fetchConfig()
def appId = config.getOrDefault("APPLICATION_ID", "org.openedx.app")
def platformName = config.getOrDefault("PLATFORM_NAME", "OpenEdx").toLowerCase()
def firebaseConfig = config.get('FIREBASE')
def firebaseEnabled = firebaseConfig?.getOrDefault('ENABLED', false)

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
if (firebaseEnabled) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'

    tasks.register('generateGoogleServicesJson') {
        configHelper.generateGoogleServicesJson(appId)
    }

    preBuild.dependsOn(generateGoogleServicesJson)
} else {
    tasks.register('removeGoogleServicesJson') {
        configHelper.removeGoogleServicesJson()
    }

    preBuild.dependsOn(removeGoogleServicesJson)
}

android {
    compileSdk 34

    defaultConfig {
        applicationId appId
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        resourceConfigurations += ["en", "uk"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    namespace 'org.openedx.app'

    flavorDimensions += "env"
    productFlavors {
        prod {
            dimension 'env'
            setupBranchConfigFields(it)
        }
        develop {
            dimension 'env'
            setupBranchConfigFields(it)
        }
        stage {
            dimension 'env'
            setupBranchConfigFields(it)
        }
    }

    sourceSets {
        prod {
            res.srcDirs = ["src/$platformName/res"]
        }
        develop {
            res.srcDirs = ["src/$platformName/res"]
        }
        stage {
            res.srcDirs = ["src/$platformName/res"]
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (firebaseEnabled) {
                firebaseCrashlytics {
                    mappingFileUploadEnabled false
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "$compose_compiler_version"
    }
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation project(path: ':core')
    implementation project(path: ':auth')
    implementation project(path: ':course')
    implementation project(path: ':dashboard')
    implementation project(path: ':discovery')
    implementation project(path: ':profile')
    implementation project(path: ':discussion')
    implementation project(path: ':whatsnew')

    kapt "androidx.room:room-compiler:$room_version"

    implementation 'androidx.core:core-splashscreen:1.0.1'

    // Segment Library
    implementation "com.segment.analytics.kotlin:android:1.14.2"
    // Segment's Firebase integration
    implementation 'com.segment.analytics.kotlin.destinations:firebase:1.5.2'
    // Braze SDK Integration
    implementation "com.braze:braze-segment-kotlin:1.4.2"

    // Branch SDK Integration
    implementation 'io.branch.sdk.android:library:5.9.0'
    implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'
    implementation "com.android.installreferrer:installreferrer:2.2"

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "io.mockk:mockk-android:$mockk_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "androidx.arch.core:core-testing:$android_arch_version"
}

private def setupBranchConfigFields(buildType) {
    def branchConfig = configHelper.fetchConfig().get("BRANCH")
    def branchKey = ""
    def branchUriScheme = ""
    def branchHost = ""
    def branchAlternateHost = ""

    if (branchConfig && branchConfig.get("ENABLED")) {
        branchKey = branchConfig.getOrDefault("KEY", "")
        branchUriScheme = branchConfig.getOrDefault("URI_SCHEME", "")
        branchHost = branchConfig.getOrDefault("HOST", "")
        branchAlternateHost = branchConfig.getOrDefault("ALTERNATE_HOST", "")

        // Validation: Throw exception if any field is empty
        if (branchKey.isEmpty() || branchUriScheme.isEmpty() || branchHost.isEmpty() ||
                branchAlternateHost.isEmpty()) {
            throw new IllegalStateException("One or more Branch configuration fields are empty.")
        }
    }

    buildType.resValue "string", "branch_key", branchKey
    buildType.resValue "string", "branch_uri_scheme", branchUriScheme
    buildType.resValue "string", "branch_host", branchHost
    buildType.resValue "string", "branch_alternate_host", branchAlternateHost
}
