buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.yaml:snakeyaml:1.33'
    }
}

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

def currentFlavour = getCurrentFlavor()

android {
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    namespace 'org.openedx.core'

    flavorDimensions += "env"
    productFlavors {
        prod {
            dimension 'env'
            insertBuildConfigFields(currentFlavour, it)
        }
        develop {
            dimension 'env'
            insertBuildConfigFields(currentFlavour, it)
        }
        stage {
            dimension 'env'
            insertBuildConfigFields(currentFlavour, it)
        }
    }

    sourceSets {
        develop {
            res.srcDirs = ['src/openedx/res']
        }
        main {
            assets {
                srcDirs 'src/main/assets', 'assets'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "$compose_compiler_version"
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    //AndroidX
    api "androidx.core:core-ktx:$core_version"
    api "androidx.appcompat:appcompat:$appcompat_version"
    api "com.google.android.material:material:$material_version"
    api "androidx.fragment:fragment-ktx:$fragment_version"
    api "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    api "androidx.viewpager2:viewpager2:$viewpager2_version"
    api "androidx.window:window:$window_version"
    api "androidx.work:work-runtime-ktx:$work_version"

    //Android Jetpack
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Room
    api "androidx.room:room-runtime:$room_version"
    api "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Compose
    api "androidx.compose.runtime:runtime:$compose_version"
    api "androidx.compose.runtime:runtime-livedata:$compose_version"
    api "androidx.compose.ui:ui:$compose_version"
    api "androidx.compose.material:material:$compose_version"
    api "androidx.compose.foundation:foundation:$compose_version"
    debugApi "androidx.compose.ui:ui-tooling:$compose_version"
    api "androidx.compose.ui:ui-tooling-preview:$compose_version"
    api "androidx.compose.material:material-icons-extended:$compose_version"
    debugApi "androidx.customview:customview:1.2.0-alpha02"
    debugApi "androidx.customview:customview-poolingcontainer:1.0.0"

    //Networking
    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    api "com.squareup.retrofit2:converter-gson:$retrofit_version"
    api "com.squareup.okhttp3:logging-interceptor:$logginginterceptor_version"

    // Koin DI
    api "io.insert-koin:koin-core:$koin_version"
    api "io.insert-koin:koin-android:$koin_version"

    api "io.coil-kt:coil-compose:$coil_version"
    api "io.coil-kt:coil-gif:$coil_version"

    api "org.jsoup:jsoup:$jsoup_version"

    api platform("com.google.firebase:firebase-bom:$firebase_version")
    api 'com.google.firebase:firebase-common-ktx'
    api "com.google.firebase:firebase-crashlytics-ktx"
    api "com.google.firebase:firebase-analytics-ktx"

    //Play In-App Review
    api "com.google.android.play:review-ktx:$in_app_review"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

def insertBuildConfigFields(currentFlavour, buildType) {
    if (currentFlavour == buildType.name) {
        configHelper.generateConfigJson()
        configHelper.generateMicrosoftConfig()
    }
    def config = configHelper.fetchConfig()
    def platformName = config.getOrDefault("PLATFORM_NAME", "")
    def platformFullName = config.getOrDefault("PLATFORM_FULL_NAME", "")

    buildType.resValue "string", "platform_name", platformName
    buildType.resValue "string", "platform_full_name", platformFullName
    insertFacebookBuildConfigFields(config, buildType)
    insertMicrosoftManifestPlaceholder(config, buildType)
}

static def insertFacebookBuildConfigFields(config, buildType) {
    def facebook = config.get("FACEBOOK")
    def facebookAppId = ""
    def facebookClientToken = ""
    if (facebook) {
        facebookAppId = facebook.getOrDefault("FACEBOOK_APP_ID", "")
        facebookClientToken = facebook.getOrDefault("CLIENT_TOKEN", "")
    }
    buildType.resValue "string", "facebook_app_id", facebookAppId
    buildType.resValue "string", "fb_login_protocol_scheme", "fb$facebookAppId"
    buildType.resValue "string", "facebook_client_token", facebookClientToken
}

static def insertMicrosoftManifestPlaceholder(config, buildType) {
    def microsoft = config.get("MICROSOFT")
    def microsoftPackageSignature = ""
    if (microsoft) {
        microsoftPackageSignature = microsoft.getOrDefault("PACKAGE_SIGNATURE", "")
    }
    buildType.manifestPlaceholders = [microsoftSignature: microsoftPackageSignature]
}
