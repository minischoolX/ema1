buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.yaml:snakeyaml:1.33'
    }
}

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp'
}

def currentFlavour = getCurrentFlavor()
def config = configHelper.fetchConfig()
def themeDirectory = config.getOrDefault("THEME_DIRECTORY", "openedx")

android {
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    namespace 'org.openedx.core'

    flavorDimensions += "env"
    productFlavors {
        prod {
            dimension 'env'
            insertBuildConfigFields(currentFlavour, it)
        }
        develop {
            dimension 'env'
            insertBuildConfigFields(currentFlavour, it)
        }
        stage {
            dimension 'env'
            insertBuildConfigFields(currentFlavour, it)
        }
    }

    sourceSets {
        prod {
            java.srcDirs = ["src/$themeDirectory"]
            res.srcDirs = ["src/$themeDirectory/res"]
        }
        develop {
            java.srcDirs = ["src/$themeDirectory"]
            res.srcDirs = ["src/$themeDirectory/res"]
        }
        stage {
            java.srcDirs = ["src/$themeDirectory"]
            res.srcDirs = ["src/$themeDirectory/res"]
        }
        main {
            assets {
                srcDirs 'src/main/assets', 'assets'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
        freeCompilerArgs = List.of("-Xstring-concat=inline")
    }

    buildFeatures {
        viewBinding true
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "$compose_compiler_version"
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    //AndroidX
    api "androidx.core:core-ktx:$core_version"
    api "androidx.appcompat:appcompat:$appcompat_version"
    api "com.google.android.material:material:$material_version"
    api "androidx.fragment:fragment-ktx:$fragment_version"
    api "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    api "androidx.viewpager2:viewpager2:$viewpager2_version"
    api "androidx.window:window:$window_version"
    api "androidx.work:work-runtime-ktx:$work_version"

    // Fullstory
    api 'com.fullstory:instrumentation-full:1.47.0@aar'
    api 'com.fullstory:compose:1.47.0@aar'

    // Room
    ksp "androidx.room:room-compiler:$room_version"

    api "org.jsoup:jsoup:$jsoup_version"

    api platform("com.google.firebase:firebase-bom:$firebase_version")
    api 'com.google.firebase:firebase-common-ktx'
    api "com.google.firebase:firebase-crashlytics-ktx"
    api "com.google.firebase:firebase-analytics-ktx"

    //Play In-App Review
    api "com.google.android.play:review-ktx:$in_app_review"

    // Branch SDK Integration
    api "io.branch.sdk.android:library:5.9.0"
    api "com.google.android.gms:play-services-ads-identifier:18.1.0"
    api "com.android.installreferrer:installreferrer:2.2"

    // Zip
    api "net.lingala.zip4j:zip4j:$zip_version"

    //  OpenEdx libs
    api("org.openedx:foundation:0.1")

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

def insertBuildConfigFields(currentFlavour, buildType) {
    if (currentFlavour == buildType.name) {
        configHelper.generateConfigJson()
        configHelper.generateMicrosoftConfig()
    }
    def config = configHelper.fetchConfig()
    def platformName = config.getOrDefault("PLATFORM_NAME", "")
    def platformFullName = config.getOrDefault("PLATFORM_FULL_NAME", "")

    buildType.resValue "string", "platform_name", platformName
    buildType.resValue "string", "platform_full_name", platformFullName
    insertFacebookBuildConfigFields(config, buildType)
    insertMicrosoftManifestPlaceholder(config, buildType)
}

static def insertFacebookBuildConfigFields(config, buildType) {
    def facebook = config.get("FACEBOOK")
    def facebookAppId = ""
    def facebookClientToken = ""
    if (facebook) {
        facebookAppId = facebook.getOrDefault("FACEBOOK_APP_ID", "")
        facebookClientToken = facebook.getOrDefault("CLIENT_TOKEN", "")
    }
    buildType.resValue "string", "facebook_app_id", facebookAppId
    buildType.resValue "string", "fb_login_protocol_scheme", "fb$facebookAppId"
    buildType.resValue "string", "facebook_client_token", facebookClientToken
}

static def insertMicrosoftManifestPlaceholder(config, buildType) {
    def microsoft = config.get("MICROSOFT")
    def microsoftPackageSignature = ""
    if (microsoft) {
        microsoftPackageSignature = microsoft.getOrDefault("PACKAGE_SIGNATURE", "")
    }
    buildType.manifestPlaceholders = [microsoftSignature: microsoftPackageSignature]
}
